{"version":3,"sources":["components/Error.js","components/Loading.js","components/SearchBox.js","components/Results.js","components/NavBar.js","components/Movies.js","Util/FilterNoImage.js","components/MovieDetails.js","App.js","serviceWorker.js","index.js"],"names":["Error","props","className","message","Loading","role","SearchBox","type","placeholder","onChange","Onchange","onKeyDown","OnkeyDown","IsLoading","Results","SearchResult","Search","map","item","index","key","to","imdbID","src","Poster","alt","style","width","height","objectFit","NavBar","Movie","state","items","term","error","fetchData","setState","fetch","process","then","response","json","data","console","log","catch","handleChange","event","target","value","handlekeydown","e","this","searchresult","x","filter","xs","FilterNoImage","Fragment","Component","MovieDetail","id","a","Response","Data","match","params","Title","class","color","textAlign","aria-hidden","imdbRating","Rated","Plot","fontWeight","Actors","Awards","withRouter","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.695f2052.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Error = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"row justify-content-center text-light\">\r\n        <h5 className=\"alert-danger mt-2\">{props.message}</h5>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"spinner-border text-primary mt-2\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"row mx-auto justify-content-center\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control mt-3\"\r\n          placeholder=\"Search for a Movie\"\r\n          onChange={props.Onchange}\r\n          onKeyDown={props.OnkeyDown}\r\n        />\r\n        {props.IsLoading && <Loading />}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Results = (props) => {\r\n  const SearchResult = props.Search;\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        {SearchResult\r\n          ? SearchResult.map((item, index) => {\r\n              return (\r\n                <div className=\"col-sm-4\" key={index}>\r\n                  <div className=\"card mt-3 mb-3\">\r\n                    <Link to={`/MovieDetail/${item.imdbID}`}>\r\n                      <img\r\n                        src={item.Poster}\r\n                        className=\"card-img-top\"\r\n                        alt=\"Image Unavailable\"\r\n                        style={{\r\n                          width: \"100%\",\r\n                          height: \"60vh\",\r\n                          objectFit: \"cover\",\r\n                        }}\r\n                      />\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n      <Link to=\"/\">\r\n        <legend className=\"text-success fa fa-text-width pr-5\">Movies</legend>\r\n      </Link>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Movies.css\";\r\nimport Error from \"./Error\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport Results from \"./Results\";\r\nimport NavBar from \"./NavBar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FilterNoImage from \"../Util/FilterNoImage\";\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    items: [],\r\n    term: \"Avengers\",\r\n    IsLoading: false,\r\n    error: [],\r\n  };\r\n\r\n  fetchData = () => {\r\n    this.setState({ IsLoading: true });\r\n    const api = process.env.REACT_APP_WeatherApi;\r\n    fetch(`https://www.omdbapi.com/?apikey=${api}&s=${this.state.term}`)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        this.setState({\r\n          error: data.Error,\r\n          IsLoading: false,\r\n          items: data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    if (!event.target.value) {\r\n      return console.log(\"Null input detected\");\r\n    } else {\r\n      this.setState({ term: event.target.value, error: \"\" });\r\n    }\r\n  };\r\n\r\n  handlekeydown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.setState({ error: \"\" });\r\n      if (!e.target.value) {\r\n        this.setState({ error: \"Cannot be Empty\" });\r\n        return;\r\n      }\r\n      this.fetchData();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { Search } = this.state.items;\r\n\r\n    //Filter Out Post without images\r\n    const searchresult = FilterNoImage(Search);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar />\r\n        <div className=\"container\">\r\n          <SearchBox\r\n            Onchange={this.handleChange}\r\n            OnkeyDown={this.handlekeydown}\r\n            IsLoading={this.state.IsLoading}\r\n          />\r\n\r\n          {this.state.error ? <Error message={this.state.error} /> : null}\r\n\r\n          <Results Search={searchresult} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n","export default function FilterNoImage(x) {\r\n  //This Function filters out all movie object wihout an image\r\n\r\n  if (x) {\r\n    let result = x.filter((xs) => xs.Poster !== \"N/A\");\r\n    return result;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link, useParams, withRouter } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport \"./Movies.css\";\r\n\r\nclass MovieDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Data: [],\r\n    };\r\n  }\r\n\r\n  fetchData = async (id) => {\r\n    const apiKey = process.env.REACT_APP_WeatherApi;\r\n\r\n    fetch(`https://www.omdbapi.com/?apikey=${apiKey}&i=${id}`)\r\n      .then((Response) => {\r\n        return Response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"dataarea\", data);\r\n        this.setState({\r\n          Data: data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    let { id } = this.props.match.params;\r\n    console.log(\"imbd id \", id);\r\n    this.fetchData(id);\r\n  }\r\n\r\n  render() {\r\n    const { Data } = this.state;\r\n    console.log(\"Data\", Data.Title);\r\n    return (\r\n      <>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-4 mt-3\">\r\n              <div className=\"card\">\r\n                <img class=\"card-img-top\" src={Data.Poster} />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-8 mx-auto\" style={{ color: \"white\" }}>\r\n              <div className=\"Title\">\r\n                <h1 style={{ textAlign: \"center\" }}>{Data.Title}</h1>\r\n              </div>\r\n              <div className=\"Ratings mb-2\">\r\n                <i class=\"fa fa-star myicon\" aria-hidden=\"true\">\r\n                  {Data.imdbRating}\r\n                </i>\r\n                <span className=\"ml-2\">{Data.Rated}</span>\r\n              </div>\r\n              <div className=\"StoryArea\">\r\n                <p>{Data.Plot}</p>\r\n              </div>\r\n              <br />\r\n              <div className=\"Actors\">\r\n                <h5 style={{ fontWeight: \"bolder\" }}>Actors</h5>\r\n                <p>{Data.Actors}</p>\r\n              </div>\r\n              <div className=\"Awards\">\r\n                <h5 style={{ fontWeight: \"bolder\" }}>Awards</h5>\r\n                <p>{Data.Awards}</p>\r\n              </div>\r\n              <div className=\"Actors\"></div>\r\n              <div className=\"Actors\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(MovieDetail);\r\n","import React from \"react\";\nimport Movie from \"./components/Movies\";\nimport NoMatch from \"./components/NoMatch\";\nimport MovieDetail from \"./components/MovieDetails\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/MovieDb\" component={Movie} />\n      <Route exact path=\"/MovieDetail/:id\" component={MovieDetail} />\n      {/* <Route path=\"*\" component={NoMatch}></Route> */}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}