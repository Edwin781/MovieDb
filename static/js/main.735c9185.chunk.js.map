{"version":3,"sources":["components/Movies.js","App.js","serviceWorker.js","index.js"],"names":["Movie","state","items","term","title","image","Description","loading","error","fetchData","console","log","fetch","process","then","response","json","data","setState","Poster","plot","catch","message","handleChange","event","target","value","handlekeydown","e","key","this","Search","className","type","placeholder","onChange","onKeyDown","map","item","imdbID","href","src","alt","style","width","height","objectFit","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yMA8HeA,G,6NAvHbC,MAAQ,CACNC,MAAO,GACPC,KAAM,SACNC,MAAO,GACPC,MAAO,GACPC,YAAa,GACbC,SAAS,EACTC,MAAO,I,EAGTC,UAAY,WACVC,QAAQC,IAAI,UAEZC,MAAM,kCAAD,OADOC,WACP,cAED,EAAKZ,MAAME,KAFV,SAGM,UAERW,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZhB,MAAOe,EACPb,MAAOa,EAAKb,MACZC,MAAOY,EAAKE,OACZb,YAAaW,EAAKG,UAGrBC,OAAM,SAACb,GACN,EAAKU,SAAS,CAAEV,MAAOA,EAAMc,UAC7BZ,QAAQF,MAAM,SAAUA,O,EAsB9Be,aAAe,SAACC,GACd,IAAKA,EAAMC,OAAOC,MAChB,OAAOhB,QAAQC,IAAI,uBAEnB,EAAKO,SAAS,CAAEf,KAAMqB,EAAMC,OAAOC,S,EAMvCC,cAAgB,SAACC,GACflB,QAAQC,IAAI,OAAQiB,EAAEH,OAAOC,OACf,UAAVE,EAAEC,KACmB,KAAnBD,EAAEH,OAAOC,OACX,EAAKjB,a,kEAjBTqB,KAAKrB,c,+BAsBG,IACAsB,EAAWD,KAAK7B,MAAMC,MAAtB6B,OAGR,OAFArB,QAAQC,IAAIoB,GAGV,oCACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,eACb,2BACEC,KAAK,OACLD,UAAU,oBACVE,YAAY,mBACZC,SAAUL,KAAKP,aACfa,UAAWN,KAAKH,iBAIpB,yBAAKK,UAAU,OACZD,EACGA,EAAOM,KAAI,SAACC,GACV,OACE,yBAAKN,UAAU,WAAWH,IAAKS,EAAKC,QAClC,yBAAKP,UAAU,kBACb,uBAAGQ,KAAK,KACN,yBACEC,IAAKH,EAAKnB,OACVa,UAAU,eACVU,IAAI,MACJC,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,UAAW,iBAQzB,Y,GAhHIC,cCELC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdzC,OAAM,SAAAb,GACLE,QAAQF,MAAMA,EAAMc,a","file":"static/js/main.735c9185.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Movies.css\";\r\nimport { DebounceInput } from \"react-debounce-input\";\r\nimport MovieDetail from \"./MovieDetails\";\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    items: [],\r\n    term: \"Merlin\",\r\n    title: \"\",\r\n    image: \"\",\r\n    Description: \"\",\r\n    loading: false,\r\n    error: \"\",\r\n  };\r\n\r\n  fetchData = () => {\r\n    console.log(\"called\");\r\n    const api = process.env.REACT_APP_WeatherApi;\r\n    fetch(\r\n      `http://www.omdbapi.com/?apikey=${api}&s=${\r\n        this.state.term\r\n      }&plot=${\"short\"}`\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          items: data,\r\n          title: data.title,\r\n          image: data.Poster,\r\n          Description: data.plot,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ error: error.message });\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n  //Attempt to pass data to a new screen using route etc (currently not working)\r\n  /* fetchSpecific = () => {\r\n    fetch(`http://www.omdbapi.com/?apikey=${api}&s=${this.state.term}`)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        <MovieDetail details={data} />;\r\n      })\r\n      .catch((error) => {\r\n        <MovieDetail errors={error} />;\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }; */\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    if (!event.target.value) {\r\n      return console.log(\"Null input detected\");\r\n    } else {\r\n      this.setState({ term: event.target.value });\r\n    }\r\n\r\n    // this.fetchData();\r\n  };\r\n\r\n  handlekeydown = (e) => {\r\n    console.log(\"this\", e.target.value);\r\n    if (e.key === \"Enter\") {\r\n      if (e.target.value !== \"\") {\r\n        this.fetchData();\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { Search } = this.state.items;\r\n    console.log(Search);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div className=\"row mx-auto\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control mt-3\"\r\n              placeholder=\"Search for Movie\"\r\n              onChange={this.handleChange}\r\n              onKeyDown={this.handlekeydown}\r\n            />\r\n            {/*  <MovieDetail /> */}\r\n          </div>\r\n          <div className=\"row\">\r\n            {Search\r\n              ? Search.map((item) => {\r\n                  return (\r\n                    <div className=\"col-sm-4\" key={item.imdbID}>\r\n                      <div className=\"card mt-5 mb-3\">\r\n                        <a href=\"#\">\r\n                          <img\r\n                            src={item.Poster}\r\n                            className=\"card-img-top\"\r\n                            alt=\"...\"\r\n                            style={{\r\n                              width: \"100%\",\r\n                              height: \"60vh\",\r\n                              objectFit: \"cover\",\r\n                            }}\r\n                          />\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              : null}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport Movie from \"./components/Movies\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return <Movie />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}